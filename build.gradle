buildscript {
    repositories {
//        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    }
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// NetBeans magic
if (!hasProperty('mainClass')) {
    ext.mainClass = 'com.github.totomz.mm.Main'
}

repositories {
    mavenCentral()
}

dependencies {    
    
    compile 'io.rest-assured:rest-assured:3.0.1'
    compile 'io.javaslang:javaslang:2.0.3'
    compile 'org.bitbucket.fwilhelm:org.jenetics:3.5.1'
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile 'ch.qos.logback:logback-classic:1.1.7'
    compile 'ch.qos.logback:logback-core:1.1.7'
//    compile 'com.sparkjava:spark-core:2.6'
    compile 'com.google.code.gson:gson:2.7'
    compile 'redis.clients:jedis:2.9.0'

    // sparkjava
    //9.3.6.v20151106
    compile 'org.eclipse.jetty:jetty-server:9.3.6.v20151106'
    compile 'org.eclipse.jetty:jetty-webapp:9.3.6.v20151106'    
    compile 'org.eclipse.jetty.websocket:websocket-server:9.3.6.v20151106'    
    compile 'org.eclipse.jetty.websocket:websocket-servlet:9.3.6.v20151106'
    
    testCompile 'junit:junit:4.10'
    
}

shadowJar {
   baseName = 'shadow'
   classifier = null
   version = null
}

jar {
   manifest {
       attributes 'Main-Class': 'com.github.totomz.mm.Main'
   }
}

// Heroku
task stage {
  dependsOn clean, shadowJar
}

// Unit test and Integration test setup
test {
    testLogging {
        showStandardStreams = true
        events "passed", "skipped", "failed","standard_out", "standard_error"
        exceptionFormat = 'full'
    }
    dependsOn 'cleanTest'
    exclude '**/integration/**'
}

task integrationTest( type: Test ) {
    dependsOn stage
    include '**/integration/**'
    testLogging {
        showStandardStreams = true
        events "passed", "skipped", "failed","standard_out", "standard_error"
        exceptionFormat = 'full'
    }
    
    doFirst {   
        println "Starting application"
        println "$buildDir "
//        exec {
//            workingDir "$project.rootDir/turbodeploy"
//            commandLine './turbodeploy.sh', 'run', '--context','dev', '--proxy', '--redis'
//        }        
    }
    
    // finalize is always executed, doLast is not exec if there are test failures
//    finalizedBy cleanRunningContainers    
}